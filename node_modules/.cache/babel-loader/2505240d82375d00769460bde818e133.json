{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-sms';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = authData => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    authData: authData\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: email,\n      password: password\n    };\n    let url = '/auth';\n    axios.post(url, authData).then(response => {\n      // time from API in seconds\n      // new Date().getTime() return milliseconds\n      // const issuedAt = new Date(response.data.issuedAt * 1000)\n      // const expiry = new Date(response.data.expiry * 1000)\n      // expiredIn in milliseconds\n      const expiredIn = response.data.expiry * 1000 - new Date().getTime();\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('expiry', response.data.expiry * 1000);\n      localStorage.setItem('userId', response.data.userId);\n      localStorage.setItem('issuedAt', response.data.issuedAt * 1000);\n      dispatch(authSuccess(response.data));\n      dispatch(checkAuthTimeout(expiredIn));\n    }).catch(err => {\n      console.log(\"Error authenticating....:\");\n      console.log(err.response);\n      dispatch(authFail(err.response));\n    });\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expiry');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('issuedAt');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  // experationTime in milliseconds\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nexport const authSetRedirectPath = path => {\n  return {\n    type: actionTypes.AUTH_SET_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(+localStorage.getItem('expiry'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const expirationTime = expirationDate.getTime() - new Date().getTime();\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess({\n          token: token,\n          userId: userId\n        }));\n        dispatch(checkAuthTimeout(expirationTime));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","authData","AUTH_SUCCESS","authFail","error","AUTH_FAIL","auth","email","password","dispatch","username","url","post","then","response","expiredIn","data","expiry","Date","getTime","localStorage","setItem","token","userId","issuedAt","checkAuthTimeout","catch","err","console","log","logout","removeItem","AUTH_LOGOUT","expirationTime","setTimeout","authSetRedirectPath","path","AUTH_SET_REDIRECT_PATH","authCheckState","getItem","expirationDate"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-sms';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    };\r\n};\r\n\r\nexport const authSuccess = (authData) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        authData: authData\r\n    };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    };\r\n};  \r\n\r\nexport const auth = (email, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            username: email,\r\n            password: password,\r\n        }\r\n        let url = '/auth';\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                // time from API in seconds\r\n                // new Date().getTime() return milliseconds\r\n\r\n                // const issuedAt = new Date(response.data.issuedAt * 1000)\r\n                // const expiry = new Date(response.data.expiry * 1000)\r\n\r\n                // expiredIn in milliseconds\r\n                const expiredIn = response.data.expiry * 1000 - new Date().getTime()      \r\n                localStorage.setItem('token', response.data.token);\r\n                localStorage.setItem('expiry', response.data.expiry * 1000);\r\n                localStorage.setItem('userId', response.data.userId);\r\n                localStorage.setItem('issuedAt', response.data.issuedAt * 1000);\r\n                dispatch(authSuccess(response.data));\r\n                dispatch(checkAuthTimeout(expiredIn));\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Error authenticating....:\");\r\n                console.log(err.response);\r\n                dispatch(authFail(err.response));\r\n            })\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expiry');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('issuedAt');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    // experationTime in milliseconds\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime);\r\n    };\r\n};\r\n\r\nexport const authSetRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.AUTH_SET_REDIRECT_PATH,\r\n        path: path\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(+localStorage.getItem('expiry')); \r\n            \r\n            if (expirationDate <= new Date()) {\r\n                dispatch(logout());\r\n            } else {                \r\n                const expirationTime = expirationDate.getTime() - new Date().getTime();\r\n                const userId = localStorage.getItem('userId');\r\n                dispatch(authSuccess({token: token, userId: userId}));\r\n                dispatch(checkAuthTimeout(expirationTime));\r\n            }\r\n            \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}