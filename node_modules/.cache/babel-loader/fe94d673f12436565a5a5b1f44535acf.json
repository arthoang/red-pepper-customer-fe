{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\Restaurant\\\\Customer-App\\\\red-pepper\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../store/actions/';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementLabel: 'Email/Username:',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your email or your username'\n          },\n          value: '',\n          validation: {\n            required: true // isEmail: true\n\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementLabel: 'Password:',\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your password'\n          },\n          value: '',\n          validation: {\n            required: true // minLength: 7\n\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value);\n    };\n  }\n\n  componentDidMount() {// if (!this.props.building && this.props.authRedirectPath!=='/') {\n    //     //reset redirect path to root\n    //     this.props.onAuthSetRedirectPath();\n    // }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(el => React.createElement(Input, {\n      key: el.id,\n      elementLabel: el.config.elementLabel,\n      elementType: el.config.elementType,\n      elementConfig: el.config.elementConfig,\n      value: el.config.value,\n      invalid: !el.config.valid,\n      shouldValidate: el.config.validation,\n      touched: el.config.touched,\n      changed: event => this.inputChangedHandler(event, el.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n    let authUI = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    });\n\n    if (!this.props.loading) {\n      authUI = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Please login with your username or email address: \"), form, React.createElement(Button, {\n        btnType: \"ButtonBlue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n\n    let errorMsg = null;\n\n    if (this.props.error) {\n      errorMsg = React.createElement(\"p\", {\n        className: classes.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.props.error.data.detail);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      });\n    }\n\n    ;\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, authRedirect, errorMsg, authUI);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n    onAuthSetRedirectPath: () => dispatch(actions.authSetRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","classes","Spinner","Redirect","actions","Auth","state","controls","email","elementLabel","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","componentDidMount","rules","isValid","trim","minLength","length","maxLength","isEmail","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","el","authUI","loading","errorMsg","error","data","detail","authRedirect","isAuthenticated","authRedirectPath","mapStateToProps","auth","token","mapDispatchToProps","dispatch","onAuthSetRedirectPath","authSetRedirectPath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,sBAAzB;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBS,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE;AACHC,UAAAA,YAAY,EAAE,iBADX;AAEHC,UAAAA,WAAW,EAAE,OAFV;AAGHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAHZ;AAOHC,UAAAA,KAAK,EAAE,EAPJ;AAQHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF,CAER;;AAFQ,WART;AAYHC,UAAAA,KAAK,EAAE,KAZJ;AAaHC,UAAAA,OAAO,EAAE;AAbN,SADD;AAgBNC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,YAAY,EAAE,WADR;AAENC,UAAAA,WAAW,EAAE,OAFP;AAGNC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAHT;AAONC,UAAAA,KAAK,EAAE,EAPD;AAQNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF,CAER;;AAFQ,WARN;AAYNC,UAAAA,KAAK,EAAE,KAZD;AAaNC,UAAAA,OAAO,EAAE;AAbH;AAhBJ;AADN,KADiB;;AAAA,SAuEzBE,mBAvEyB,GAuEH,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC1C,YAAMC,eAAe,GAAG,EACpB,GAAG,KAAKjB,KAAL,CAAWC,QADM;AAEpB,SAACe,WAAD,GAAe,EACX,GAAG,KAAKhB,KAAL,CAAWC,QAAX,CAAoBe,WAApB,CADQ;AAEXR,UAAAA,KAAK,EAAEO,KAAK,CAACG,MAAN,CAAaV,KAFT;AAGXG,UAAAA,KAAK,EAAE,KAAKQ,aAAL,CAAmBJ,KAAK,CAACG,MAAN,CAAaV,KAAhC,EAAuC,KAAKR,KAAL,CAAWC,QAAX,CAAoBe,WAApB,EAAiCP,UAAxE,CAHI;AAIXG,UAAAA,OAAO,EAAE;AAJE;AAFK,OAAxB;AASA,WAAKQ,QAAL,CAAc;AAACnB,QAAAA,QAAQ,EAAEgB;AAAX,OAAd;AACH,KAlFwB;;AAAA,SAoFzBI,aApFyB,GAoFRN,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACO,cAAN;AACA,WAAKC,KAAL,CAAWC,MAAX,CAAkB,KAAKxB,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BM,KAA5C,EAAmD,KAAKR,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BL,KAAhF;AACH,KAvFwB;AAAA;;AAoCzBiB,EAAAA,iBAAiB,GAAG,CAChB;AACA;AACA;AACA;AACH;;AAEDN,EAAAA,aAAa,CAACX,KAAD,EAAQkB,KAAR,EAAe;AACxB,QAAIC,OAAO,GAAG,IAAd;;AAEA,QAAID,KAAK,CAAChB,QAAV,EAAoB;AAChBiB,MAAAA,OAAO,GAAGnB,KAAK,CAACoB,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACG,SAAV,EAAqB;AACjBF,MAAAA,OAAO,GAAGnB,KAAK,CAACsB,MAAN,IAAgBJ,KAAK,CAACG,SAAtB,IAAmCF,OAA7C;AACH;;AAED,QAAID,KAAK,CAACK,SAAV,EAAqB;AACjBJ,MAAAA,OAAO,GAAGnB,KAAK,CAACsB,MAAN,IAAgBJ,KAAK,CAACK,SAAtB,IAAmCJ,OAA7C;AACH;;AAED,QAAID,KAAK,CAACM,OAAV,EAAmB;AACf,YAAMC,OAAO,GAAG,uIAAhB;AACAN,MAAAA,OAAO,GAAGM,OAAO,CAACC,IAAR,CAAa1B,KAAb,KAAuBmB,OAAjC;AACH;;AAED,QAAID,KAAK,CAACS,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAN,MAAAA,OAAO,GAAGM,OAAO,CAACC,IAAR,CAAa1B,KAAb,KAAuBmB,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH;;AAoBDS,EAAAA,MAAM,GAAG;AACL,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKtC,KAAL,CAAWC,QAA3B,EAAqC;AACjCoC,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKzC,KAAL,CAAWC,QAAX,CAAoBqC,GAApB;AAFW,OAAvB;AAIH;;AAED,UAAMI,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBC,EAAE,IACjC,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,EAAE,CAACJ,EAAf;AACQ,MAAA,YAAY,EAAEI,EAAE,CAACH,MAAH,CAAUtC,YADhC;AAEQ,MAAA,WAAW,EAAEyC,EAAE,CAACH,MAAH,CAAUrC,WAF/B;AAGQ,MAAA,aAAa,EAAEwC,EAAE,CAACH,MAAH,CAAUpC,aAHjC;AAIQ,MAAA,KAAK,EAAEuC,EAAE,CAACH,MAAH,CAAUjC,KAJzB;AAKQ,MAAA,OAAO,EAAE,CAACoC,EAAE,CAACH,MAAH,CAAU9B,KAL5B;AAMQ,MAAA,cAAc,EAAIiC,EAAE,CAACH,MAAH,CAAUhC,UANpC;AAOQ,MAAA,OAAO,EAAImC,EAAE,CAACH,MAAH,CAAU7B,OAP7B;AAQQ,MAAA,OAAO,EAAGG,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgC6B,EAAE,CAACJ,EAAnC,CAR5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS,CAAb;AAaA,QAAIK,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAI,CAAC,KAAKtB,KAAL,CAAWuB,OAAhB,EAAyB;AACrBD,MAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACL;AAAM,QAAA,QAAQ,EAAE,KAAKxB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADJ,EAEKqB,IAFL,EAGI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADK,CAAT;AAOH;;AAED,QAAIK,QAAQ,GAAG,IAAf;;AACA,QAAI,KAAKxB,KAAL,CAAWyB,KAAf,EAAsB;AAClBD,MAAAA,QAAQ,GAAG;AAAG,QAAA,SAAS,EAAEpD,OAAO,CAACqD,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8B,KAAKzB,KAAL,CAAWyB,KAAX,CAAiBC,IAAjB,CAAsBC,MAApD,CAAX;AACH;;AAED,QAAIC,YAAY,GAAG,IAAnB;;AACA,QAAI,KAAK5B,KAAL,CAAW6B,eAAf,EAAgC;AAC5BD,MAAAA,YAAY,GAAG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAK5B,KAAL,CAAW8B,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACH;;AAAA;AAED,WACI;AAAK,MAAA,SAAS,EAAE1D,OAAO,CAACI,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKoD,YADL,EAEKJ,QAFL,EAGKF,MAHL,CADJ;AAOH;;AA3IwB;;AA8I7B,MAAMS,eAAe,GAAGtD,KAAK,IAAI;AAC7B,SAAO;AACH8C,IAAAA,OAAO,EAAE9C,KAAK,CAACuD,IAAN,CAAWT,OADjB;AAEHE,IAAAA,KAAK,EAAEhD,KAAK,CAACuD,IAAN,CAAWP,KAFf;AAGHI,IAAAA,eAAe,EAAEpD,KAAK,CAACuD,IAAN,CAAWC,KAAX,KAAqB,IAHnC;AAIHH,IAAAA,gBAAgB,EAAErD,KAAK,CAACuD,IAAN,CAAWF;AAJ1B,GAAP;AAMH,CAPD;;AASA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHlC,IAAAA,MAAM,EAAE,CAACtB,KAAD,EAAQW,QAAR,KAAqB6C,QAAQ,CAAC5D,OAAO,CAACyD,IAAR,CAAarD,KAAb,EAAoBW,QAApB,CAAD,CADlC;AAEH8C,IAAAA,qBAAqB,EAAE,MAAMD,QAAQ,CAAC5D,OAAO,CAAC8D,mBAAR,CAA4B,GAA5B,CAAD;AAFlC,GAAP;AAIH,CALD;;AAOA,eAAepE,OAAO,CAAC8D,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C1D,IAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as actions from '../../store/actions/';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementLabel: 'Email/Username:',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your email or your username'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    // isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementLabel: 'Password:',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Your password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    // minLength: 7\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }, \r\n        },\r\n    };\r\n\r\n    componentDidMount() {\r\n        // if (!this.props.building && this.props.authRedirectPath!=='/') {\r\n        //     //reset redirect path to root\r\n        //     this.props.onAuthSetRedirectPath();\r\n        // }\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value);\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        const form = formElementsArray.map(el => (\r\n            <Input key={el.id}\r\n                    elementLabel={el.config.elementLabel}\r\n                    elementType={el.config.elementType} \r\n                    elementConfig={el.config.elementConfig}\r\n                    value={el.config.value}\r\n                    invalid={!el.config.valid}\r\n                    shouldValidate = {el.config.validation}\r\n                    touched = {el.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, el.id)} \r\n            />\r\n        ));\r\n        \r\n        let authUI = <Spinner />\r\n        if (!this.props.loading) {\r\n            authUI = <div>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h1>Please login with your username or email address: </h1>\r\n                    {form}\r\n                    <Button btnType=\"ButtonBlue\">Submit</Button>                    \r\n                </form>\r\n            </div>\r\n        }\r\n\r\n        let errorMsg = null;        \r\n        if (this.props.error) {\r\n            errorMsg = <p className={classes.error}>{this.props.error.data.detail}</p>;\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        };\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMsg}\r\n                {authUI}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\r\n        onAuthSetRedirectPath: () => dispatch(actions.authSetRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}