{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  //data\n  employees: null,\n  newEmployee: null,\n  roles: null,\n  selectedEmployee: null,\n  //loading ui handling\n  loading: false,\n  fetchRolesLoading: false,\n  saveEmployeeLoading: false,\n  fetchEmployeeLoading: false,\n  //error handling\n  fetchAllEmployeesError: null,\n  fetchEmployeeError: null,\n  fetchRolesError: null,\n  saveEmployeeError: null\n}; //fetch all\n\nconst fetchAllEmployeeStart = (state, action) => {\n  return updateObject(state, {\n    employees: null,\n    fetchAllEmployeesError: null,\n    loading: true\n  });\n};\n\nconst fetchAllEmployeeSuccess = (state, action) => {\n  return updateObject(state, {\n    employees: action.employees,\n    fetchAllEmployeesError: null,\n    loading: false\n  });\n};\n\nconst fetchAllEmployeeFailed = (state, action) => {\n  return updateObject(state, {\n    employees: null,\n    fetchAllEmployeesError: action.error,\n    loading: false\n  });\n}; // fetch roles\n\n\nconst fetchAllRolesStart = (state, action) => {\n  return updateObject(state, {\n    roles: null,\n    fetchRolesError: null,\n    fetchRolesLoading: true\n  });\n};\n\nconst fetchAllRolesSuccess = (state, action) => {\n  return updateObject(state, {\n    roles: action.roles,\n    fetchRolesError: null,\n    fetchRolesLoading: false\n  });\n};\n\nconst fetchAllRolesFailed = (state, action) => {\n  return updateObject(state, {\n    roles: null,\n    fetchRolesError: action.error,\n    fetchRolesLoading: false\n  });\n}; //fetch one\n\n\nconst fetchEmployeeStart = (state, action) => {\n  return updateObject(state, {\n    selectedEmployee: null,\n    fetchEmployeeError: null,\n    fetchEmployeeLoading: true\n  });\n};\n\nconst fetchEmployeeSuccess = (state, action) => {\n  return updateObject(state, {\n    selectedEmployee: action.employee,\n    fetchEmployeeError: null,\n    fetchEmployeeLoading: false\n  });\n};\n\nconst fetchEmployeeFailed = (state, action) => {\n  return updateObject(state, {\n    selectedEmployee: null,\n    fetchEmployeeError: action.error,\n    fetchEmployeeLoading: false\n  });\n}; //create\n\n\nconst createEmployeeStart = (state, action) => {\n  return updateObject(state, {\n    newEmployee: null,\n    saveEmployeeError: null,\n    saveEmployeeLoading: true\n  });\n};\n\nconst createEmployeeSuccess = (state, action) => {\n  return updateObject(state, {\n    newEmployee: action.newEmployee,\n    saveEmployeeError: null,\n    saveEmployeeLoading: false\n  });\n};\n\nconst createEmployeeFailed = (state, action) => {\n  return updateObject(state, {\n    newEmployee: null,\n    saveEmployeeError: action.error,\n    saveEmployeeLoading: false\n  });\n}; // clean up\n\n\nconst employeeCleanUp = (state, action) => {\n  return updateObject(state, {\n    fetchAllEmployeesError: null,\n    fetchEmployeeError: null,\n    fetchRolesError: null,\n    saveEmployeeError: null,\n    newEmployee: null,\n    selectedEmployee: null\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //fetch all\n    case actionTypes.FETCH_ALL_EMPLOYEES_START:\n      return fetchAllEmployeeStart(state, action);\n\n    case actionTypes.FETCH_ALL_EMPLOYEES_SUCCESS:\n      return fetchAllEmployeeSuccess(state, action);\n\n    case actionTypes.FETCH_ALL_EMPLOYEES_FAILED:\n      return fetchAllEmployeeFailed(state, action);\n    //fetch all roles\n\n    case actionTypes.FETCH_ALL_ROLES_START:\n      return fetchAllRolesStart(state, action);\n\n    case actionTypes.FETCH_ALL_ROLES_SUCCESS:\n      return fetchAllRolesSuccess(state, action);\n\n    case actionTypes.FETCH_ALL_ROLES_FAILED:\n      return fetchAllRolesFailed(state, action);\n    //fetch one\n\n    case actionTypes.FETCH_EMPLOYEE_START:\n      return fetchEmployeeStart(state, action);\n\n    case actionTypes.FETCH_EMPLOYEE_SUCCESS:\n      return fetchEmployeeSuccess(state, action);\n\n    case actionTypes.FETCH_EMPLOYEE_FAILED:\n      return fetchEmployeeFailed(state, action);\n    //create\n\n    case actionTypes.CREATE_EMPLOYEE_START:\n      return createEmployeeStart(state, action);\n\n    case actionTypes.CREATE_EMPLOYEE_SUCCESS:\n      return createEmployeeSuccess(state, action);\n\n    case actionTypes.CREATE_EMPLOYEE_FAILED:\n      return createEmployeeFailed(state, action);\n    //cleanup\n\n    case actionTypes.EMPLOYEE_CLEAN_UP:\n      return employeeCleanUp(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/store/reducers/EmployeeReducer.js"],"names":["actionTypes","updateObject","initialState","employees","newEmployee","roles","selectedEmployee","loading","fetchRolesLoading","saveEmployeeLoading","fetchEmployeeLoading","fetchAllEmployeesError","fetchEmployeeError","fetchRolesError","saveEmployeeError","fetchAllEmployeeStart","state","action","fetchAllEmployeeSuccess","fetchAllEmployeeFailed","error","fetchAllRolesStart","fetchAllRolesSuccess","fetchAllRolesFailed","fetchEmployeeStart","fetchEmployeeSuccess","employee","fetchEmployeeFailed","createEmployeeStart","createEmployeeSuccess","createEmployeeFailed","employeeCleanUp","reducer","type","FETCH_ALL_EMPLOYEES_START","FETCH_ALL_EMPLOYEES_SUCCESS","FETCH_ALL_EMPLOYEES_FAILED","FETCH_ALL_ROLES_START","FETCH_ALL_ROLES_SUCCESS","FETCH_ALL_ROLES_FAILED","FETCH_EMPLOYEE_START","FETCH_EMPLOYEE_SUCCESS","FETCH_EMPLOYEE_FAILED","CREATE_EMPLOYEE_START","CREATE_EMPLOYEE_SUCCESS","CREATE_EMPLOYEE_FAILED","EMPLOYEE_CLEAN_UP"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    //data\r\n    employees: null,\r\n    newEmployee: null,\r\n    roles: null,\r\n    selectedEmployee: null,\r\n    //loading ui handling\r\n    loading: false,\r\n    fetchRolesLoading: false,\r\n    saveEmployeeLoading: false,\r\n    fetchEmployeeLoading: false,\r\n    //error handling\r\n    fetchAllEmployeesError: null,\r\n    fetchEmployeeError: null,\r\n    fetchRolesError: null,\r\n    saveEmployeeError: null,\r\n    \r\n};\r\n\r\n//fetch all\r\nconst fetchAllEmployeeStart = (state, action) => {\r\n    return updateObject(state, {employees: null, fetchAllEmployeesError: null, loading: true});\r\n}\r\n\r\nconst fetchAllEmployeeSuccess = (state, action) => {\r\n    return updateObject(state, {employees: action.employees, fetchAllEmployeesError: null, loading: false});\r\n}\r\n\r\nconst fetchAllEmployeeFailed = (state, action) => {\r\n    return updateObject(state, {employees: null, fetchAllEmployeesError: action.error, loading: false});\r\n}\r\n\r\n// fetch roles\r\nconst fetchAllRolesStart = (state, action) => {\r\n    return updateObject(state, {roles: null, fetchRolesError: null, fetchRolesLoading: true});\r\n}\r\n\r\nconst fetchAllRolesSuccess = (state, action) => {\r\n    return updateObject(state, {roles: action.roles, fetchRolesError: null, fetchRolesLoading: false});\r\n}\r\n\r\nconst fetchAllRolesFailed = (state, action) => {\r\n    return updateObject(state, {roles: null, fetchRolesError: action.error, fetchRolesLoading: false});\r\n}\r\n\r\n//fetch one\r\nconst fetchEmployeeStart = (state, action) => {\r\n    return updateObject(state, {selectedEmployee: null, fetchEmployeeError: null, fetchEmployeeLoading: true});\r\n}\r\n\r\nconst fetchEmployeeSuccess = (state, action) => {\r\n    return updateObject(state, {selectedEmployee: action.employee, fetchEmployeeError: null, fetchEmployeeLoading: false});\r\n}\r\n\r\nconst fetchEmployeeFailed = (state, action) => {\r\n    return updateObject(state, {selectedEmployee: null, fetchEmployeeError: action.error, fetchEmployeeLoading: false});\r\n}\r\n\r\n//create\r\nconst createEmployeeStart = (state, action) => {\r\n    return updateObject(state, {newEmployee: null, saveEmployeeError: null, saveEmployeeLoading: true});\r\n}\r\n\r\nconst createEmployeeSuccess = (state, action) => {\r\n    return updateObject(state, {newEmployee: action.newEmployee, saveEmployeeError: null, saveEmployeeLoading: false});\r\n}\r\n\r\nconst createEmployeeFailed = (state, action) => {\r\n    return updateObject(state, {newEmployee: null, saveEmployeeError: action.error, saveEmployeeLoading: false});\r\n}\r\n\r\n// clean up\r\nconst employeeCleanUp = (state,action) => {\r\n    return updateObject(state, {\r\n        fetchAllEmployeesError: null,\r\n        fetchEmployeeError: null,\r\n        fetchRolesError: null,\r\n        saveEmployeeError: null,\r\n        newEmployee: null,\r\n        selectedEmployee: null\r\n    })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        //fetch all\r\n        case actionTypes.FETCH_ALL_EMPLOYEES_START: return fetchAllEmployeeStart(state, action);\r\n        case actionTypes.FETCH_ALL_EMPLOYEES_SUCCESS: return fetchAllEmployeeSuccess(state, action);\r\n        case actionTypes.FETCH_ALL_EMPLOYEES_FAILED: return fetchAllEmployeeFailed(state, action);\r\n        //fetch all roles\r\n        case actionTypes.FETCH_ALL_ROLES_START: return fetchAllRolesStart(state, action);\r\n        case actionTypes.FETCH_ALL_ROLES_SUCCESS: return fetchAllRolesSuccess(state, action);\r\n        case actionTypes.FETCH_ALL_ROLES_FAILED: return fetchAllRolesFailed(state, action);\r\n        //fetch one\r\n        case actionTypes.FETCH_EMPLOYEE_START: return fetchEmployeeStart(state, action);\r\n        case actionTypes.FETCH_EMPLOYEE_SUCCESS: return fetchEmployeeSuccess(state, action);\r\n        case actionTypes.FETCH_EMPLOYEE_FAILED: return fetchEmployeeFailed(state, action);\r\n        //create\r\n        case actionTypes.CREATE_EMPLOYEE_START: return createEmployeeStart(state, action);\r\n        case actionTypes.CREATE_EMPLOYEE_SUCCESS: return createEmployeeSuccess(state, action);\r\n        case actionTypes.CREATE_EMPLOYEE_FAILED: return createEmployeeFailed(state, action);\r\n        //cleanup\r\n        case actionTypes.EMPLOYEE_CLEAN_UP: return employeeCleanUp(state, action);\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}