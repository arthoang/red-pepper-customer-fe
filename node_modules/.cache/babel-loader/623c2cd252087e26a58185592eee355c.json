{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\Restaurant\\\\Customer-App\\\\red-pepper\\\\src\\\\containers\\\\EmployeeContainer\\\\EmployeeContainer.js\";\nimport React, { Component } from 'react';\nimport classes from './EmployeeContainer.module.css';\nimport EmployeeList from '../../components/Employee/EmployeeList/EmployeeList';\nimport EmployeeDetails from '../../components/Employee/EmployeeDetails/EmployeeDetails';\nimport EmployeeControls from '../../components/Employee/EmployeeControls/EmployeeControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions';\n\nclass EmployeeContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showModal: false\n    };\n\n    this.toggleShowModal = () => {\n      this.setState(prevState => {\n        return {\n          showModal: !prevState.showModal\n        };\n      });\n    };\n\n    this.newEmployeeHandler = () => {\n      this.toggleShowModal();\n    };\n\n    this.selectEmployeeHandler = data => {\n      const employeeId = data.employeeId;\n      this.props.fetchEmployee(employeeId);\n      this.toggleShowModal();\n    };\n\n    this.saveEmployee = data => {\n      console.log(data);\n      this.props.createNewEmployee(data); // if success, send confirmation to detail\n      // if error, send error to detail\n\n      console.log(\"Employee saved!!\"); //clean up\n\n      this.props.employeeCleanUp(); //refresh the list\n\n      this.props.fetchAllEmployees();\n    };\n\n    this.completeAction = () => {\n      //clean up\n      this.props.employeeCleanUp();\n      this.toggleShowModal();\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.isAuthenticated) {\n      this.props.onAuthSetRedirectPath();\n      this.props.history.replace('/login');\n    } else {\n      this.props.fetchAllEmployees();\n      this.props.fetchAllRoles();\n    }\n  }\n\n  render() {\n    let ui = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n\n    if (!this.props.loading && this.props.employees) {\n      let details = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n\n      if (this.props.roles) {\n        let roleOptions = [];\n\n        if (this.props.roles) {\n          this.props.roles.forEach(e => {\n            let option = {\n              value: e.roleId,\n              label: e.roleName\n            };\n            roleOptions.push(option);\n          });\n        }\n\n        if (this.state.showModal) {\n          let error = null;\n          let loading = false; //parse errors\n\n          if (this.props.saveEmployeeError) error = this.props.saveEmployeeError;\n          if (this.props.fetchEmployeeError) error = this.props.fetchEmployeeError; //parse loading\n\n          if (this.props.saveEmployeeLoading) loading = true;\n          if (this.props.fetchEmployeeLoading) loading = true;\n          details = React.createElement(EmployeeDetails, {\n            cancel: this.completeAction,\n            save: this.saveEmployee,\n            loading: loading,\n            acknowledge: this.completeAction,\n            roleOptions: roleOptions,\n            employee: this.props.selectedEmployee,\n            newEmployee: this.props.newEmployee,\n            success: this.props.newEmployee,\n            error: error,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          });\n        }\n      }\n\n      ui = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(EmployeeList, {\n        data: this.props.employees,\n        selectEmployee: this.selectEmployeeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(EmployeeControls, {\n        newEmployee: this.newEmployeeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        show: this.state.showModal,\n        off: this.toggleShowModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, details));\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.EmployeeContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, ui);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    employees: state.employee.employees,\n    roles: state.employee.roles,\n    newEmployee: state.employee.newEmployee,\n    selectedEmployee: state.employee.selectedEmployee,\n    //loading\n    loading: state.employee.loading,\n    saveEmployeeLoading: state.employee.saveEmployeeLoading,\n    fetchEmployeeLoading: state.employee.fetchEmployeeLoading,\n    //errors\n    fetchAllEmployeesError: state.employee.fetchAllEmployeesError,\n    fetchEmployeeError: state.employee.fetchEmployeeError,\n    fetchRolesError: state.employee.fetchRolesError,\n    saveEmployeeError: state.employee.saveEmployeeError,\n    //auth\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSetRedirectPath: () => dispatch(actions.authSetRedirectPath('/employee')),\n    fetchAllEmployees: () => dispatch(actions.fetchAllEmployees()),\n    fetchAllRoles: () => dispatch(actions.fetchAllRoles()),\n    fetchEmployee: employeeId => dispatch(actions.fetchEmployee(employeeId)),\n    createNewEmployee: data => dispatch(actions.createEmployee(data)),\n    employeeCleanUp: () => dispatch(actions.employeeCleanUp())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeContainer);","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/containers/EmployeeContainer/EmployeeContainer.js"],"names":["React","Component","classes","EmployeeList","EmployeeDetails","EmployeeControls","Modal","connect","Spinner","actions","EmployeeContainer","state","showModal","toggleShowModal","setState","prevState","newEmployeeHandler","selectEmployeeHandler","data","employeeId","props","fetchEmployee","saveEmployee","console","log","createNewEmployee","employeeCleanUp","fetchAllEmployees","completeAction","componentDidMount","isAuthenticated","onAuthSetRedirectPath","history","replace","fetchAllRoles","render","ui","loading","employees","details","roles","roleOptions","forEach","e","option","value","roleId","label","roleName","push","error","saveEmployeeError","fetchEmployeeError","saveEmployeeLoading","fetchEmployeeLoading","selectedEmployee","newEmployee","mapStateToProps","employee","fetchAllEmployeesError","fetchRolesError","auth","token","authRedirectPath","mapDispatchToProps","dispatch","authSetRedirectPath","createEmployee"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,YAAP,MAAyB,qDAAzB;AACA,OAAOC,eAAP,MAA4B,2DAA5B;AACA,OAAOC,gBAAP,MAA6B,6DAA7B;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;;AAGA,MAAMC,iBAAN,SAAgCT,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAEtCU,KAFsC,GAE9B;AACJC,MAAAA,SAAS,EAAE;AADP,KAF8B;;AAAA,SAMtCC,eANsC,GAMpB,MAAM;AACpB,WAAKC,QAAL,CAAeC,SAAD,IAAe;AACzB,eAAO;AACHH,UAAAA,SAAS,EAAE,CAACG,SAAS,CAACH;AADnB,SAAP;AAGH,OAJD;AAKH,KAZqC;;AAAA,SActCI,kBAdsC,GAcjB,MAAM;AACvB,WAAKH,eAAL;AACH,KAhBqC;;AAAA,SAkBtCI,qBAlBsC,GAkBbC,IAAD,IAAU;AAC9B,YAAMC,UAAU,GAAGD,IAAI,CAACC,UAAxB;AACA,WAAKC,KAAL,CAAWC,aAAX,CAAyBF,UAAzB;AACA,WAAKN,eAAL;AACH,KAtBqC;;AAAA,SAkCtCS,YAlCsC,GAkCtBJ,IAAD,IAAU;AACrBK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,WAAKE,KAAL,CAAWK,iBAAX,CAA6BP,IAA7B,EAFqB,CAGrB;AACA;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EALqB,CAMrB;;AACA,WAAKJ,KAAL,CAAWM,eAAX,GAPqB,CAQrB;;AACA,WAAKN,KAAL,CAAWO,iBAAX;AAEH,KA7CqC;;AAAA,SA+CtCC,cA/CsC,GA+CrB,MAAM;AACnB;AACA,WAAKR,KAAL,CAAWM,eAAX;AACA,WAAKb,eAAL;AACH,KAnDqC;AAAA;;AAwBtCgB,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKT,KAAL,CAAWU,eAAhB,EAAiC;AAC7B,WAAKV,KAAL,CAAWW,qBAAX;AACA,WAAKX,KAAL,CAAWY,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH,KAHD,MAGO;AACH,WAAKb,KAAL,CAAWO,iBAAX;AACA,WAAKP,KAAL,CAAWc,aAAX;AACH;AACJ;;AAqBDC,EAAAA,MAAM,GAAG;AACL,QAAIC,EAAE,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;;AACA,QAAI,CAAC,KAAKhB,KAAL,CAAWiB,OAAZ,IAAuB,KAAKjB,KAAL,CAAWkB,SAAtC,EAAiD;AAC7C,UAAIC,OAAO,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;;AACA,UAAI,KAAKnB,KAAL,CAAWoB,KAAf,EAAsB;AAClB,YAAIC,WAAW,GAAG,EAAlB;;AACA,YAAI,KAAKrB,KAAL,CAAWoB,KAAf,EAAsB;AAClB,eAAKpB,KAAL,CAAWoB,KAAX,CAAiBE,OAAjB,CAA0BC,CAAD,IAAO;AAC5B,gBAAIC,MAAM,GAAG;AACTC,cAAAA,KAAK,EAAEF,CAAC,CAACG,MADA;AAETC,cAAAA,KAAK,EAAEJ,CAAC,CAACK;AAFA,aAAb;AAIAP,YAAAA,WAAW,CAACQ,IAAZ,CAAiBL,MAAjB;AACH,WAND;AAOH;;AACD,YAAI,KAAKjC,KAAL,CAAWC,SAAf,EAA0B;AACtB,cAAIsC,KAAK,GAAG,IAAZ;AACA,cAAIb,OAAO,GAAG,KAAd,CAFsB,CAGtB;;AACA,cAAI,KAAKjB,KAAL,CAAW+B,iBAAf,EAAkCD,KAAK,GAAG,KAAK9B,KAAL,CAAW+B,iBAAnB;AAClC,cAAI,KAAK/B,KAAL,CAAWgC,kBAAf,EAAmCF,KAAK,GAAG,KAAK9B,KAAL,CAAWgC,kBAAnB,CALb,CAMtB;;AACA,cAAI,KAAKhC,KAAL,CAAWiC,mBAAf,EAAoChB,OAAO,GAAG,IAAV;AACpC,cAAI,KAAKjB,KAAL,CAAWkC,oBAAf,EAAqCjB,OAAO,GAAG,IAAV;AAGrCE,UAAAA,OAAO,GACH,oBAAC,eAAD;AACI,YAAA,MAAM,EAAE,KAAKX,cADjB;AAEI,YAAA,IAAI,EAAE,KAAKN,YAFf;AAGI,YAAA,OAAO,EAAEe,OAHb;AAII,YAAA,WAAW,EAAE,KAAKT,cAJtB;AAKI,YAAA,WAAW,EAAEa,WALjB;AAMI,YAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWmC,gBANzB;AAOI,YAAA,WAAW,EAAE,KAAKnC,KAAL,CAAWoC,WAP5B;AAQI,YAAA,OAAO,EAAE,KAAKpC,KAAL,CAAWoC,WARxB;AASI,YAAA,KAAK,EAAEN,KATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;AAEJ;;AAEDd,MAAAA,EAAE,GACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWkB,SAA/B;AAA0C,QAAA,cAAc,EAAE,KAAKrB,qBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,gBAAD;AAAkB,QAAA,WAAW,EAAE,KAAKD,kBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWC,SAAxB;AAAmC,QAAA,GAAG,EAAE,KAAKC,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+D0B,OAA/D,CAHJ,CADJ;AAOH;;AACD,WACI;AAAK,MAAA,SAAS,EAAErC,OAAO,CAACQ,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK0B,EADL,CADJ;AAMH;;AA9GqC;;AA+GzC;;AAED,MAAMqB,eAAe,GAAG9C,KAAK,IAAI;AAC7B,SAAO;AACH2B,IAAAA,SAAS,EAAE3B,KAAK,CAAC+C,QAAN,CAAepB,SADvB;AAEHE,IAAAA,KAAK,EAAE7B,KAAK,CAAC+C,QAAN,CAAelB,KAFnB;AAGHgB,IAAAA,WAAW,EAAE7C,KAAK,CAAC+C,QAAN,CAAeF,WAHzB;AAIHD,IAAAA,gBAAgB,EAAE5C,KAAK,CAAC+C,QAAN,CAAeH,gBAJ9B;AAKH;AACAlB,IAAAA,OAAO,EAAE1B,KAAK,CAAC+C,QAAN,CAAerB,OANrB;AAOHgB,IAAAA,mBAAmB,EAAE1C,KAAK,CAAC+C,QAAN,CAAeL,mBAPjC;AAQHC,IAAAA,oBAAoB,EAAE3C,KAAK,CAAC+C,QAAN,CAAeJ,oBARlC;AASH;AACAK,IAAAA,sBAAsB,EAAEhD,KAAK,CAAC+C,QAAN,CAAeC,sBAVpC;AAWHP,IAAAA,kBAAkB,EAAEzC,KAAK,CAAC+C,QAAN,CAAeN,kBAXhC;AAYHQ,IAAAA,eAAe,EAAEjD,KAAK,CAAC+C,QAAN,CAAeE,eAZ7B;AAaHT,IAAAA,iBAAiB,EAAExC,KAAK,CAAC+C,QAAN,CAAeP,iBAb/B;AAcH;AACArB,IAAAA,eAAe,EAAEnB,KAAK,CAACkD,IAAN,CAAWC,KAAX,KAAqB,IAfnC;AAgBHC,IAAAA,gBAAgB,EAAEpD,KAAK,CAACkD,IAAN,CAAWE;AAhB1B,GAAP;AAkBH,CAnBD;;AAqBA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHlC,IAAAA,qBAAqB,EAAE,MAAMkC,QAAQ,CAACxD,OAAO,CAACyD,mBAAR,CAA4B,WAA5B,CAAD,CADlC;AAEHvC,IAAAA,iBAAiB,EAAE,MAAMsC,QAAQ,CAACxD,OAAO,CAACkB,iBAAR,EAAD,CAF9B;AAGHO,IAAAA,aAAa,EAAE,MAAM+B,QAAQ,CAACxD,OAAO,CAACyB,aAAR,EAAD,CAH1B;AAIHb,IAAAA,aAAa,EAAGF,UAAD,IAAgB8C,QAAQ,CAACxD,OAAO,CAACY,aAAR,CAAsBF,UAAtB,CAAD,CAJpC;AAKHM,IAAAA,iBAAiB,EAAGP,IAAD,IAAU+C,QAAQ,CAACxD,OAAO,CAAC0D,cAAR,CAAuBjD,IAAvB,CAAD,CALlC;AAMHQ,IAAAA,eAAe,EAAE,MAAMuC,QAAQ,CAACxD,OAAO,CAACiB,eAAR,EAAD;AAN5B,GAAP;AAQH,CATD;;AAWA,eAAenB,OAAO,CAACkD,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CtD,iBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './EmployeeContainer.module.css';\r\nimport EmployeeList from '../../components/Employee/EmployeeList/EmployeeList';\r\nimport EmployeeDetails from '../../components/Employee/EmployeeDetails/EmployeeDetails';\r\nimport EmployeeControls from '../../components/Employee/EmployeeControls/EmployeeControls';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport * as actions from '../../store/actions';\r\n\r\n\r\nclass EmployeeContainer extends Component {\r\n\r\n    state = {\r\n        showModal: false,\r\n    }\r\n\r\n    toggleShowModal = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                showModal: !prevState.showModal\r\n            }\r\n        })\r\n    }\r\n\r\n    newEmployeeHandler = () => {\r\n        this.toggleShowModal();\r\n    }\r\n\r\n    selectEmployeeHandler = (data) => {\r\n        const employeeId = data.employeeId;\r\n        this.props.fetchEmployee(employeeId);\r\n        this.toggleShowModal();\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.onAuthSetRedirectPath();\r\n            this.props.history.replace('/login');\r\n        } else {\r\n            this.props.fetchAllEmployees();\r\n            this.props.fetchAllRoles();\r\n        }\r\n    }\r\n\r\n    saveEmployee = (data) => {\r\n        console.log(data)\r\n        this.props.createNewEmployee(data);\r\n        // if success, send confirmation to detail\r\n        // if error, send error to detail\r\n        console.log(\"Employee saved!!\");\r\n        //clean up\r\n        this.props.employeeCleanUp();\r\n        //refresh the list\r\n        this.props.fetchAllEmployees();\r\n\r\n    }\r\n\r\n    completeAction = () => {\r\n        //clean up\r\n        this.props.employeeCleanUp();\r\n        this.toggleShowModal();\r\n    }\r\n    \r\n    render() {\r\n        let ui = <Spinner />        \r\n        if (!this.props.loading && this.props.employees) {\r\n            let details = <Spinner />\r\n            if (this.props.roles) {\r\n                let roleOptions = [];\r\n                if (this.props.roles) {\r\n                    this.props.roles.forEach((e) => {\r\n                        let option = {\r\n                            value: e.roleId,\r\n                            label: e.roleName, \r\n                        }\r\n                        roleOptions.push(option);\r\n                    })\r\n                }\r\n                if (this.state.showModal) {\r\n                    let error = null;\r\n                    let loading = false;\r\n                    //parse errors\r\n                    if (this.props.saveEmployeeError) error = this.props.saveEmployeeError;\r\n                    if (this.props.fetchEmployeeError) error = this.props.fetchEmployeeError;\r\n                    //parse loading\r\n                    if (this.props.saveEmployeeLoading) loading = true;\r\n                    if (this.props.fetchEmployeeLoading) loading = true;\r\n\r\n\r\n                    details = (\r\n                        <EmployeeDetails \r\n                            cancel={this.completeAction} \r\n                            save={this.saveEmployee} \r\n                            loading={loading}\r\n                            acknowledge={this.completeAction}\r\n                            roleOptions={roleOptions}\r\n                            employee={this.props.selectedEmployee}\r\n                            newEmployee={this.props.newEmployee}\r\n                            success={this.props.newEmployee}\r\n                            error={error}\r\n                            />\r\n                    )\r\n                }\r\n                \r\n            }\r\n            \r\n            ui = (\r\n                <React.Fragment>\r\n                    <EmployeeList data={this.props.employees} selectEmployee={this.selectEmployeeHandler}/>\r\n                    <EmployeeControls newEmployee={this.newEmployeeHandler}/>\r\n                    <Modal show={this.state.showModal} off={this.toggleShowModal}>{details}</Modal>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n        return (\r\n            <div className={classes.EmployeeContainer}>\r\n                {ui}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        employees: state.employee.employees,\r\n        roles: state.employee.roles,\r\n        newEmployee: state.employee.newEmployee,\r\n        selectedEmployee: state.employee.selectedEmployee,\r\n        //loading\r\n        loading: state.employee.loading,\r\n        saveEmployeeLoading: state.employee.saveEmployeeLoading,\r\n        fetchEmployeeLoading: state.employee.fetchEmployeeLoading,\r\n        //errors\r\n        fetchAllEmployeesError: state.employee.fetchAllEmployeesError,\r\n        fetchEmployeeError: state.employee.fetchEmployeeError,\r\n        fetchRolesError: state.employee.fetchRolesError,\r\n        saveEmployeeError: state.employee.saveEmployeeError,\r\n        //auth\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuthSetRedirectPath: () => dispatch(actions.authSetRedirectPath('/employee')),\r\n        fetchAllEmployees: () => dispatch(actions.fetchAllEmployees()),\r\n        fetchAllRoles: () => dispatch(actions.fetchAllRoles()),\r\n        fetchEmployee: (employeeId) => dispatch(actions.fetchEmployee(employeeId)),\r\n        createNewEmployee: (data) => dispatch(actions.createEmployee(data)),\r\n        employeeCleanUp: () => dispatch(actions.employeeCleanUp()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeContainer);"]},"metadata":{},"sourceType":"module"}