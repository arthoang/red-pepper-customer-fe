{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\Restaurant\\\\Customer-App\\\\red-pepper\\\\src\\\\components\\\\Employee\\\\EmployeeDetails\\\\EmployeeDetails.js\";\nimport React, { Component } from 'react';\nimport Button from '../../UI/Button/Button';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport Input from '../../UI/Input/Input';\nimport { updateObject } from '../../../store/utility';\n\nclass EmployeeDetails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formIsValid: false,\n      employeeAccountForm: {\n        firstName: {\n          elementLabel: 'First name:',\n          elementType: 'input',\n          propsAccessor: 'first_name',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Employee first name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          elementLabel: 'Last name:',\n          elementType: 'input',\n          propsAccessor: 'last_name',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Employee last name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        employeeNumber: {\n          elementLabel: 'Employee Number:',\n          elementType: 'input',\n          propsAccessor: 'employee_number',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Employee number'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementLabel: 'Email:',\n          elementType: 'input',\n          propsAccessor: 'email',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Employee E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        username: {\n          elementLabel: 'Username:',\n          elementType: 'input',\n          propsAccessor: 'username',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Account username'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementLabel: 'Password:',\n          elementType: 'input',\n          propsAccessor: 'password',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Account password'\n          },\n          value: '',\n          validation: {\n            required: false,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        roles: {\n          elementLabel: 'User roles:',\n          elementType: 'select',\n          propsAccessor: 'roles',\n          elementConfig: {\n            options: this.props.roleOptions,\n            isMulti: true,\n            isClearable: true\n          },\n          validation: {\n            minSelected: 1\n          },\n          value: [],\n          valid: true,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedForm = { ...this.state.employeeAccountForm\n      };\n      const updatedFormElement = { ...updatedForm[inputIdentifier]\n      };\n\n      if (updatedFormElement.elementType === 'select') {\n        updatedFormElement.value = event;\n      } else {\n        updatedFormElement.value = event.target.value;\n      }\n\n      if (updatedFormElement.validation) {\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      }\n\n      updatedFormElement.touched = true; //update form validation\n\n      let formIsValid = true;\n\n      for (let el in updatedForm) {\n        formIsValid = updatedForm[el].valid && formIsValid;\n      }\n\n      updatedForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        employeeAccountForm: updatedForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.saveHandler = () => {\n      const roles = [];\n      this.state.employeeAccountForm.roles.value.forEach(e => {\n        let role = {\n          role_id: e.value\n        };\n        roles.push(role);\n      });\n      let data = {\n        employee_number: this.state.employeeAccountForm.employeeNumber.value,\n        first_name: this.state.employeeAccountForm.firstName.value,\n        last_name: this.state.employeeAccountForm.lastName.value,\n        email: this.state.employeeAccountForm.email.value,\n        username: this.state.employeeAccountForm.username.value,\n        password: this.state.employeeAccountForm.password.value,\n        roles: roles\n      };\n      this.props.save(data);\n    };\n\n    this.cancelHandler = () => {\n      this.props.cancel();\n    };\n\n    this.acknowledgeHandler = () => {\n      this.props.acknowledge();\n    };\n\n    this.deleteHandler = () => {\n      console.log(\"Deleted\");\n    };\n  }\n\n  componentDidMount() {\n    //set state for employee details from props received\n    if (this.props.employee) {\n      const stateObj = updateObject(this.state, updateObject(this.state.employeeAccountForm, {\n        firstName: updateObject(this.state.employeeAccountForm.firstName, {\n          value: this.props.employee.first_name\n        })\n      }));\n      console.log(\"State Object:\");\n      console.log(stateObj);\n      this.setState(stateObj);\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.minSelected) {\n      if (value) {\n        isValid = value.length >= rules.minSelected && isValid;\n      } else {\n        isValid = false && isValid;\n      }\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n    let ui = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }); // console.log(\"Employee received from props:\");\n    // if (this.props.employee) {\n    //     console.log(this.props.employee.first_name);\n    // }\n    //console.log(this.state);\n\n    if (!this.props.loading) {\n      // if create employee success, prompt user\n      if (this.props.newEmployee) {\n        const fn = this.props.newEmployee.first_name;\n        const ln = this.props.newEmployee.last_name;\n        ui = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, \"Employee \", fn, \" \\xA0 \", ln, \" was created successfully.\"), React.createElement(Button, {\n          btnType: \"ButtonBlue\",\n          clicked: this.acknowledgeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \"OK\"));\n      } // if error \n      else if (this.props.error) {\n          ui = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          }, this.props.error.data.detail), React.createElement(Button, {\n            btnType: \"ButtonWhite\",\n            clicked: this.acknowledgeHandler,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }, \"OK\"));\n        } else {\n          for (let key in this.state.employeeAccountForm) {\n            formElementsArray.push({\n              id: key,\n              config: this.state.employeeAccountForm[key]\n            });\n          }\n\n          ui = React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }, \"Employee Details\"), React.createElement(\"form\", {\n            onSubmit: this.saveHandler,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286\n            },\n            __self: this\n          }, formElementsArray.map(el => React.createElement(Input, {\n            key: el.id,\n            elementLabel: el.config.elementLabel,\n            elementType: el.config.elementType,\n            elementConfig: el.config.elementConfig,\n            value: this.props.employee ? this.props.employee[el.config.propsAccessor] : el.config.value,\n            invalid: !el.config.valid,\n            shouldValidate: el.config.validation,\n            touched: el.config.touched,\n            changed: event => this.inputChangedHandler(event, el.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288\n            },\n            __self: this\n          }))), React.createElement(Button, {\n            btnType: \"ButtonForm\",\n            clicked: this.saveHandler,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }, \"Save\"), this.props.employee ? React.createElement(Button, {\n            btnType: \"ButtonBlue\",\n            clicked: this.deleteHandler,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302\n            },\n            __self: this\n          }, \"Delete\") : null, React.createElement(Button, {\n            btnType: \"ButtonWhite\",\n            clicked: this.cancelHandler,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }, \"Cancel\"));\n        }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, ui);\n  }\n\n}\n\n;\nexport default EmployeeDetails;","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/components/Employee/EmployeeDetails/EmployeeDetails.js"],"names":["React","Component","Button","Spinner","Input","updateObject","EmployeeDetails","state","formIsValid","employeeAccountForm","firstName","elementLabel","elementType","propsAccessor","elementConfig","type","placeholder","value","validation","required","valid","touched","lastName","employeeNumber","email","isEmail","username","password","minLength","roles","options","props","roleOptions","isMulti","isClearable","minSelected","inputChangedHandler","event","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","el","setState","saveHandler","forEach","e","role","role_id","push","data","employee_number","first_name","last_name","save","cancelHandler","cancel","acknowledgeHandler","acknowledge","deleteHandler","console","log","componentDidMount","employee","stateObj","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","ui","loading","newEmployee","fn","ln","error","detail","key","id","config","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAGpCM,KAHoC,GAG5B;AACJC,MAAAA,WAAW,EAAE,KADT;AAEJC,MAAAA,mBAAmB,EAAE;AACjBC,QAAAA,SAAS,EAAE;AACPC,UAAAA,YAAY,EAAE,aADP;AAEPC,UAAAA,WAAW,EAAE,OAFN;AAGPC,UAAAA,aAAa,EAAE,YAHR;AAIPC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJR;AAQPC,UAAAA,KAAK,EAAE,EARA;AASPC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATL;AAYPC,UAAAA,KAAK,EAAE,KAZA;AAaPC,UAAAA,OAAO,EAAE;AAbF,SADM;AAgBjBC,QAAAA,QAAQ,EAAE;AACNX,UAAAA,YAAY,EAAE,YADR;AAENC,UAAAA,WAAW,EAAE,OAFP;AAGNC,UAAAA,aAAa,EAAE,WAHT;AAINC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJT;AAQNC,UAAAA,KAAK,EAAE,EARD;AASNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATN;AAYNC,UAAAA,KAAK,EAAE,KAZD;AAaNC,UAAAA,OAAO,EAAE;AAbH,SAhBO;AA+BjBE,QAAAA,cAAc,EAAE;AACZZ,UAAAA,YAAY,EAAE,kBADF;AAEZC,UAAAA,WAAW,EAAE,OAFD;AAGZC,UAAAA,aAAa,EAAE,iBAHH;AAIZC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJH;AAQZC,UAAAA,KAAK,EAAE,EARK;AASZC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATA;AAYZC,UAAAA,KAAK,EAAE,KAZK;AAaZC,UAAAA,OAAO,EAAE;AAbG,SA/BC;AA8CjBG,QAAAA,KAAK,EAAE;AACHb,UAAAA,YAAY,EAAE,QADX;AAEHC,UAAAA,WAAW,EAAE,OAFV;AAGHC,UAAAA,aAAa,EAAE,OAHZ;AAIHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJZ;AAQHC,UAAAA,KAAK,EAAE,EARJ;AASHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERM,YAAAA,OAAO,EAAE;AAFD,WATT;AAaHL,UAAAA,KAAK,EAAE,KAbJ;AAcHC,UAAAA,OAAO,EAAE;AAdN,SA9CU;AA8DjBK,QAAAA,QAAQ,EAAE;AACNf,UAAAA,YAAY,EAAE,WADR;AAENC,UAAAA,WAAW,EAAE,OAFP;AAGNC,UAAAA,aAAa,EAAE,UAHT;AAINC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJT;AAQNC,UAAAA,KAAK,EAAE,EARD;AASNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATN;AAYNC,UAAAA,KAAK,EAAE,KAZD;AAaNC,UAAAA,OAAO,EAAE;AAbH,SA9DO;AA6EjBM,QAAAA,QAAQ,EAAE;AACNhB,UAAAA,YAAY,EAAE,WADR;AAENC,UAAAA,WAAW,EAAE,OAFP;AAGNC,UAAAA,aAAa,EAAE,UAHT;AAINC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAJT;AAQNC,UAAAA,KAAK,EAAE,EARD;AASNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,KADF;AAERS,YAAAA,SAAS,EAAE;AAFH,WATN;AAaNR,UAAAA,KAAK,EAAE,KAbD;AAcNC,UAAAA,OAAO,EAAE;AAdH,SA7EO;AA6FjBQ,QAAAA,KAAK,EAAE;AACHlB,UAAAA,YAAY,EAAE,aADX;AAEHC,UAAAA,WAAW,EAAE,QAFV;AAGHC,UAAAA,aAAa,EAAE,OAHZ;AAIHC,UAAAA,aAAa,EAAE;AACXgB,YAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC,WADT;AAEXC,YAAAA,OAAO,EAAE,IAFE;AAGXC,YAAAA,WAAW,EAAE;AAHF,WAJZ;AASHhB,UAAAA,UAAU,EAAE;AACRiB,YAAAA,WAAW,EAAE;AADL,WATT;AAYHlB,UAAAA,KAAK,EAAE,EAZJ;AAaHG,UAAAA,KAAK,EAAE,IAbJ;AAcHC,UAAAA,OAAO,EAAE;AAdN;AA7FU;AAFjB,KAH4B;;AAAA,SAuLpCe,mBAvLoC,GAuLd,CAACC,KAAD,EAAQC,eAAR,KAA4B;AAC9C,YAAMC,WAAW,GAAG,EAAC,GAAG,KAAKhC,KAAL,CAAWE;AAAf,OAApB;AACA,YAAM+B,kBAAkB,GAAG,EAAC,GAAGD,WAAW,CAACD,eAAD;AAAf,OAA3B;;AACA,UAAIE,kBAAkB,CAAC5B,WAAnB,KAAiC,QAArC,EAA+C;AAC3C4B,QAAAA,kBAAkB,CAACvB,KAAnB,GAA2BoB,KAA3B;AACH,OAFD,MAEO;AACHG,QAAAA,kBAAkB,CAACvB,KAAnB,GAA2BoB,KAAK,CAACI,MAAN,CAAaxB,KAAxC;AACH;;AAED,UAAIuB,kBAAkB,CAACtB,UAAvB,EAAmC;AAC/BsB,QAAAA,kBAAkB,CAACpB,KAAnB,GAA2B,KAAKsB,aAAL,CAAmBF,kBAAkB,CAACvB,KAAtC,EAA6CuB,kBAAkB,CAACtB,UAAhE,CAA3B;AACH;;AACDsB,MAAAA,kBAAkB,CAACnB,OAAnB,GAA6B,IAA7B,CAZ8C,CAa9C;;AACA,UAAIb,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAImC,EAAT,IAAeJ,WAAf,EAA4B;AACxB/B,QAAAA,WAAW,GAAG+B,WAAW,CAACI,EAAD,CAAX,CAAgBvB,KAAhB,IAAyBZ,WAAvC;AACH;;AACD+B,MAAAA,WAAW,CAACD,eAAD,CAAX,GAA+BE,kBAA/B;AACA,WAAKI,QAAL,CAAc;AAACnC,QAAAA,mBAAmB,EAAE8B,WAAtB;AAAmC/B,QAAAA,WAAW,EAAEA;AAAhD,OAAd;AACH,KA3MmC;;AAAA,SA8MpCqC,WA9MoC,GA8MtB,MAAM;AAChB,YAAMhB,KAAK,GAAG,EAAd;AACA,WAAKtB,KAAL,CAAWE,mBAAX,CAA+BoB,KAA/B,CAAqCZ,KAArC,CAA2C6B,OAA3C,CAAmDC,CAAC,IAAI;AACpD,YAAIC,IAAI,GAAG;AACPC,UAAAA,OAAO,EAAEF,CAAC,CAAC9B;AADJ,SAAX;AAGAY,QAAAA,KAAK,CAACqB,IAAN,CAAWF,IAAX;AACH,OALD;AAMA,UAAIG,IAAI,GAAG;AACPC,QAAAA,eAAe,EAAE,KAAK7C,KAAL,CAAWE,mBAAX,CAA+Bc,cAA/B,CAA8CN,KADxD;AAEPoC,QAAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWE,mBAAX,CAA+BC,SAA/B,CAAyCO,KAF9C;AAGPqC,QAAAA,SAAS,EAAE,KAAK/C,KAAL,CAAWE,mBAAX,CAA+Ba,QAA/B,CAAwCL,KAH5C;AAIPO,QAAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWE,mBAAX,CAA+Be,KAA/B,CAAqCP,KAJrC;AAKPS,QAAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWE,mBAAX,CAA+BiB,QAA/B,CAAwCT,KAL3C;AAMPU,QAAAA,QAAQ,EAAE,KAAKpB,KAAL,CAAWE,mBAAX,CAA+BkB,QAA/B,CAAwCV,KAN3C;AAOPY,QAAAA,KAAK,EAAEA;AAPA,OAAX;AASA,WAAKE,KAAL,CAAWwB,IAAX,CAAgBJ,IAAhB;AACH,KAhOmC;;AAAA,SAkOpCK,aAlOoC,GAkOpB,MAAM;AAClB,WAAKzB,KAAL,CAAW0B,MAAX;AACH,KApOmC;;AAAA,SAsOpCC,kBAtOoC,GAsOf,MAAM;AACvB,WAAK3B,KAAL,CAAW4B,WAAX;AACH,KAxOmC;;AAAA,SA0OpCC,aA1OoC,GA0OpB,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KA5OmC;AAAA;;AAqHpCC,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAI,KAAKhC,KAAL,CAAWiC,QAAf,EAAyB;AACrB,YAAMC,QAAQ,GAAG5D,YAAY,CACzB,KAAKE,KADoB,EAEzBF,YAAY,CACR,KAAKE,KAAL,CAAWE,mBADH,EAER;AACIC,QAAAA,SAAS,EAAEL,YAAY,CACnB,KAAKE,KAAL,CAAWE,mBAAX,CAA+BC,SADZ,EAEnB;AACIO,UAAAA,KAAK,EAAE,KAAKc,KAAL,CAAWiC,QAAX,CAAoBX;AAD/B,SAFmB;AAD3B,OAFQ,CAFa,CAA7B;AAeAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,WAAKrB,QAAL,CACIqB,QADJ;AAGH;AAGJ;;AAIDvB,EAAAA,aAAa,CAACzB,KAAD,EAAQiD,KAAR,EAAe;AACxB,QAAIC,OAAO,GAAG,IAAd;;AAEA,QAAID,KAAK,CAAC/C,QAAV,EAAoB;AAChBgD,MAAAA,OAAO,GAAGlD,KAAK,CAACmD,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACtC,SAAV,EAAqB;AACjBuC,MAAAA,OAAO,GAAGlD,KAAK,CAACoD,MAAN,IAAgBH,KAAK,CAACtC,SAAtB,IAAmCuC,OAA7C;AACH;;AAED,QAAID,KAAK,CAACI,SAAV,EAAqB;AACjBH,MAAAA,OAAO,GAAGlD,KAAK,CAACoD,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AAED,QAAID,KAAK,CAAC/B,WAAV,EAAuB;AACnB,UAAIlB,KAAJ,EAAW;AACPkD,QAAAA,OAAO,GAAGlD,KAAK,CAACoD,MAAN,IAAgBH,KAAK,CAAC/B,WAAtB,IAAqCgC,OAA/C;AACH,OAFD,MAEO;AACHA,QAAAA,OAAO,GAAG,SAASA,OAAnB;AACH;AACJ;;AAED,QAAID,KAAK,CAACzC,OAAV,EAAmB;AACf,YAAM8C,OAAO,GAAG,uIAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAavD,KAAb,KAAuBkD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACO,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAavD,KAAb,KAAuBkD,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH;;AAyDDO,EAAAA,MAAM,GAAG;AACL,QAAIC,iBAAiB,GAAG,EAAxB;AACA,QAAIC,EAAE,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT,CAFK,CAGL;AACA;AACA;AACA;AAEA;;AACA,QAAI,CAAC,KAAK7C,KAAL,CAAW8C,OAAhB,EAAyB;AACrB;AACA,UAAI,KAAK9C,KAAL,CAAW+C,WAAf,EAA4B;AACxB,cAAMC,EAAE,GAAG,KAAKhD,KAAL,CAAW+C,WAAX,CAAuBzB,UAAlC;AACA,cAAM2B,EAAE,GAAG,KAAKjD,KAAL,CAAW+C,WAAX,CAAuBxB,SAAlC;AACAsB,QAAAA,EAAE,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAaG,EAAb,YAAyBC,EAAzB,+BADJ,EAEI,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,YAAhB;AAA6B,UAAA,OAAO,EAAE,KAAKtB,kBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CADJ;AAMH,OATD,CAUA;AAVA,WAWK,IAAI,KAAK3B,KAAL,CAAWkD,KAAf,EAAsB;AACvBL,UAAAA,EAAE,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAI,KAAK7C,KAAL,CAAWkD,KAAX,CAAiB9B,IAAjB,CAAsB+B,MAA1B,CADJ,EAEI,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,aAAhB;AAA8B,YAAA,OAAO,EAAE,KAAKxB,kBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADJ;AAMH,SAPI,MAOE;AACH,eAAK,IAAIyB,GAAT,IAAgB,KAAK5E,KAAL,CAAWE,mBAA3B,EAAgD;AAC5CkE,YAAAA,iBAAiB,CAACzB,IAAlB,CAAuB;AACnBkC,cAAAA,EAAE,EAAED,GADe;AAEnBE,cAAAA,MAAM,EAAE,KAAK9E,KAAL,CAAWE,mBAAX,CAA+B0E,GAA/B;AAFW,aAAvB;AAIH;;AAEDP,UAAAA,EAAE,GACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEI;AAAM,YAAA,QAAQ,EAAE,KAAK/B,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK8B,iBAAiB,CAACW,GAAlB,CAAsB3C,EAAE,IACrB,oBAAC,KAAD;AAAO,YAAA,GAAG,EAAEA,EAAE,CAACyC,EAAf;AACI,YAAA,YAAY,EAAEzC,EAAE,CAAC0C,MAAH,CAAU1E,YAD5B;AAEI,YAAA,WAAW,EAAEgC,EAAE,CAAC0C,MAAH,CAAUzE,WAF3B;AAGI,YAAA,aAAa,EAAE+B,EAAE,CAAC0C,MAAH,CAAUvE,aAH7B;AAII,YAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWiC,QAAX,GAAqB,KAAKjC,KAAL,CAAWiC,QAAX,CAAoBrB,EAAE,CAAC0C,MAAH,CAAUxE,aAA9B,CAArB,GAAoE8B,EAAE,CAAC0C,MAAH,CAAUpE,KAJzF;AAKI,YAAA,OAAO,EAAE,CAAC0B,EAAE,CAAC0C,MAAH,CAAUjE,KALxB;AAMI,YAAA,cAAc,EAAIuB,EAAE,CAAC0C,MAAH,CAAUnE,UANhC;AAOI,YAAA,OAAO,EAAIyB,EAAE,CAAC0C,MAAH,CAAUhE,OAPzB;AAQI,YAAA,OAAO,EAAGgB,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCM,EAAE,CAACyC,EAAnC,CARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,CADL,CAFJ,EAgBI,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,YAAhB;AAA6B,YAAA,OAAO,EAAE,KAAKvC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhBJ,EAiBK,KAAKd,KAAL,CAAWiC,QAAX,GACG,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,YAAhB;AAA6B,YAAA,OAAO,EAAE,KAAKJ,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,GAEG,IAnBR,EAqBI,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,aAAhB;AAA8B,YAAA,OAAO,EAAE,KAAKJ,aAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArBJ,CADJ;AA2BH;AACJ;;AAED,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKoB,EADL,CADJ;AAKH;;AAtTmC;;AAuTvC;AAED,eAAetE,eAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Button from '../../UI/Button/Button';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\nimport Input from '../../UI/Input/Input';\r\nimport { updateObject } from '../../../store/utility';\r\n\r\nclass EmployeeDetails extends Component {\r\n    \r\n\r\n    state = {\r\n        formIsValid: false,\r\n        employeeAccountForm: {\r\n            firstName: {\r\n                elementLabel: 'First name:',\r\n                elementType: 'input',\r\n                propsAccessor: 'first_name',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Employee first name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },  \r\n            lastName: {\r\n                elementLabel: 'Last name:',\r\n                elementType: 'input',\r\n                propsAccessor: 'last_name',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Employee last name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },   \r\n            employeeNumber: {\r\n                elementLabel: 'Employee Number:',\r\n                elementType: 'input',\r\n                propsAccessor: 'employee_number',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Employee number'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },     \r\n            email: {\r\n                elementLabel: 'Email:',\r\n                elementType: 'input',\r\n                propsAccessor: 'email',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Employee E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            username: {\r\n                elementLabel: 'Username:',\r\n                elementType: 'input',\r\n                propsAccessor: 'username',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Account username'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },  \r\n            password: {\r\n                elementLabel: 'Password:',\r\n                elementType: 'input',\r\n                propsAccessor: 'password',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Account password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: false,\r\n                    minLength: 8\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            roles: {\r\n                elementLabel: 'User roles:',\r\n                elementType: 'select',\r\n                propsAccessor: 'roles',\r\n                elementConfig: {\r\n                    options: this.props.roleOptions,\r\n                    isMulti: true,\r\n                    isClearable: true\r\n                },\r\n                validation: {\r\n                    minSelected: 1\r\n                },\r\n                value: [],\r\n                valid: true,\r\n                touched: false\r\n            },\r\n        },\r\n    };\r\n\r\n    componentDidMount() {\r\n        //set state for employee details from props received\r\n        if (this.props.employee) {\r\n            const stateObj = updateObject(\r\n                this.state,\r\n                updateObject(\r\n                    this.state.employeeAccountForm, \r\n                    {\r\n                        firstName: updateObject(\r\n                            this.state.employeeAccountForm.firstName, \r\n                            {\r\n                                value: this.props.employee.first_name\r\n                            }\r\n                        ),\r\n                    }\r\n                              \r\n                )\r\n            );\r\n            console.log(\"State Object:\");\r\n            console.log(stateObj);\r\n            this.setState(\r\n                stateObj\r\n            );\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        if (rules.minSelected) {\r\n            if (value) {\r\n                isValid = value.length >= rules.minSelected && isValid;\r\n            } else {\r\n                isValid = false && isValid;\r\n            }\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = {...this.state.employeeAccountForm};\r\n        const updatedFormElement = {...updatedForm[inputIdentifier]};\r\n        if (updatedFormElement.elementType==='select') {\r\n            updatedFormElement.value = event    \r\n        } else {\r\n            updatedFormElement.value = event.target.value;\r\n        }\r\n        \r\n        if (updatedFormElement.validation) {\r\n            updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        }        \r\n        updatedFormElement.touched = true;\r\n        //update form validation\r\n        let formIsValid = true;\r\n        for (let el in updatedForm) {\r\n            formIsValid = updatedForm[el].valid && formIsValid;\r\n        }\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n        this.setState({employeeAccountForm: updatedForm, formIsValid: formIsValid});  \r\n    }\r\n\r\n\r\n    saveHandler = () => {\r\n        const roles = [];\r\n        this.state.employeeAccountForm.roles.value.forEach(e => {\r\n            let role = {\r\n                role_id: e.value\r\n            }\r\n            roles.push(role);\r\n        })\r\n        let data = {\r\n            employee_number: this.state.employeeAccountForm.employeeNumber.value,\r\n            first_name: this.state.employeeAccountForm.firstName.value,\r\n            last_name: this.state.employeeAccountForm.lastName.value,\r\n            email: this.state.employeeAccountForm.email.value,\r\n            username: this.state.employeeAccountForm.username.value,\r\n            password: this.state.employeeAccountForm.password.value,\r\n            roles: roles\r\n        }\r\n        this.props.save(data);\r\n    }\r\n\r\n    cancelHandler = () => {\r\n        this.props.cancel();\r\n    }\r\n\r\n    acknowledgeHandler = () => {\r\n        this.props.acknowledge();\r\n    }\r\n\r\n    deleteHandler = () => {\r\n        console.log(\"Deleted\");\r\n    }\r\n\r\n    render() {\r\n        let formElementsArray = [];\r\n        let ui = <Spinner />\r\n        // console.log(\"Employee received from props:\");\r\n        // if (this.props.employee) {\r\n        //     console.log(this.props.employee.first_name);\r\n        // }\r\n        \r\n        //console.log(this.state);\r\n        if (!this.props.loading) {\r\n            // if create employee success, prompt user\r\n            if (this.props.newEmployee) {\r\n                const fn = this.props.newEmployee.first_name;\r\n                const ln = this.props.newEmployee.last_name;\r\n                ui = (\r\n                    <div>\r\n                        <p>Employee {fn} &nbsp; {ln} was created successfully.</p>\r\n                        <Button btnType=\"ButtonBlue\" clicked={this.acknowledgeHandler}>OK</Button>\r\n                    </div>\r\n                );\r\n            }\r\n            // if error \r\n            else if (this.props.error) {\r\n                ui = (\r\n                    <div>\r\n                        <p>{this.props.error.data.detail}</p>\r\n                        <Button btnType=\"ButtonWhite\" clicked={this.acknowledgeHandler}>OK</Button>\r\n                    </div>\r\n                );\r\n            } else {\r\n                for (let key in this.state.employeeAccountForm) {\r\n                    formElementsArray.push({\r\n                        id: key,\r\n                        config: this.state.employeeAccountForm[key]\r\n                    })\r\n                }\r\n                \r\n                ui = (\r\n                    <React.Fragment>\r\n                        <h1>Employee Details</h1>\r\n                        <form onSubmit={this.saveHandler}>\r\n                            {formElementsArray.map(el => (\r\n                                <Input key={el.id}\r\n                                    elementLabel={el.config.elementLabel}\r\n                                    elementType={el.config.elementType} \r\n                                    elementConfig={el.config.elementConfig}\r\n                                    value={this.props.employee? this.props.employee[el.config.propsAccessor] : el.config.value}\r\n                                    invalid={!el.config.valid}\r\n                                    shouldValidate = {el.config.validation}\r\n                                    touched = {el.config.touched}\r\n                                    changed={(event) => this.inputChangedHandler(event, el.id)}\r\n                                    />\r\n                            ))}                \r\n                        </form>\r\n                        <Button btnType=\"ButtonForm\" clicked={this.saveHandler}>Save</Button>\r\n                        {this.props.employee? \r\n                            <Button btnType=\"ButtonBlue\" clicked={this.deleteHandler}>Delete</Button> :\r\n                            null\r\n                        }\r\n                        <Button btnType=\"ButtonWhite\" clicked={this.cancelHandler}>Cancel</Button>\r\n                        \r\n                    </React.Fragment>\r\n                    \r\n                );\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div >\r\n                {ui}\r\n            </div>\r\n        ); \r\n    };\r\n};\r\n\r\nexport default EmployeeDetails;"]},"metadata":{},"sourceType":"module"}