{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-rp'; //fetch all\n\nexport const fetchAllEmployeeStart = () => {\n  return {\n    type: actionTypes.FETCH_ALL_EMPLOYEES_START\n  };\n};\nexport const fetchAllEmployeeSuccess = employees => {\n  return {\n    type: actionTypes.FETCH_ALL_EMPLOYEES_SUCCESS,\n    employees: employees\n  };\n};\nexport const fetchAllEmployeeFailed = error => {\n  return {\n    type: actionTypes.FETCH_ALL_EMPLOYEES_FAILED,\n    error: error\n  };\n};\nexport const fetchAllEmployees = () => {\n  return dispatch => {\n    dispatch(fetchAllEmployeeStart());\n    const url = '/employee';\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      const error = {\n        data: {\n          detail: \"Not authenticated\"\n        }\n      };\n      dispatch(fetchAllEmployeeFailed(error));\n    }\n\n    let headers = {\n      'Authorization': 'Bearer ' + token\n    };\n    axios.get(url, {\n      headers: headers\n    }).then(response => {\n      let employees = [];\n      employees = transformEmployeesResponseToList(response.data);\n      dispatch(fetchAllEmployeeSuccess(employees));\n    }).catch(err => {\n      dispatch(fetchAllEmployeeFailed(err.response));\n    });\n  };\n}; // fetch all roles\n\nexport const fetchAllRolesStart = () => {\n  return {\n    type: actionTypes.FETCH_ALL_ROLES_START\n  };\n};\nexport const fetchAllRolesSuccess = roles => {\n  return {\n    type: actionTypes.FETCH_ALL_ROLES_SUCCESS,\n    roles: roles\n  };\n};\nexport const fetchAllRolesFailed = error => {\n  return {\n    type: actionTypes.FETCH_ALL_ROLES_FAILED,\n    error: error\n  };\n};\nexport const fetchAllRoles = () => {\n  return dispatch => {\n    dispatch(fetchAllRolesStart());\n    const url = '/role';\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      const error = {\n        data: {\n          detail: \"Not authenticated\"\n        }\n      };\n      dispatch(fetchAllEmployeeFailed(error));\n    }\n\n    let headers = {\n      'Authorization': 'Bearer ' + token\n    };\n    axios.get(url, {\n      headers: headers\n    }).then(response => {\n      let roles = [];\n      roles = transformRolesResponseToList(response.data);\n      dispatch(fetchAllRolesSuccess(roles));\n    }).catch(err => {\n      dispatch(fetchAllRolesFailed(err.response));\n    });\n  };\n}; //fetch one\n\nexport const fetchEmployeeStart = () => {\n  return {\n    type: actionTypes.FETCH_EMPLOYEE_START\n  };\n};\nexport const fetchEmployeeSuccess = employee => {\n  return {\n    type: actionTypes.FETCH_EMPLOYEE_SUCCESS,\n    employee: employee\n  };\n};\nexport const fetchEmployeeFailed = error => {\n  return {\n    type: actionTypes.FETCH_EMPLOYEE_FAILED,\n    error: error\n  };\n};\nexport const fetchEmployee = employeeId => {\n  return dispatch => {\n    dispatch(fetchEmployeeStart());\n    const url = '/employee/' + employeeId;\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      const error = {\n        data: {\n          detail: \"Not authenticated\"\n        }\n      };\n      dispatch(fetchEmployeeFailed(error));\n    }\n\n    let headers = {\n      'Authorization': 'Bearer ' + token\n    };\n    axios.get(url, {\n      headers: headers\n    }).then(response => {\n      let employee = response.data;\n      dispatch(fetchEmployeeSuccess(employee));\n    }).catch(err => {\n      dispatch(fetchEmployeeFailed(err.response));\n    });\n  };\n}; //create\n\nexport const createEmployeeStart = () => {\n  return {\n    type: actionTypes.CREATE_EMPLOYEE_START\n  };\n};\nexport const createEmployeeSuccess = newEmployee => {\n  return {\n    type: actionTypes.CREATE_EMPLOYEE_SUCCESS,\n    newEmployee: newEmployee\n  };\n};\nexport const createEmployeeFailed = error => {\n  return {\n    type: actionTypes.CREATE_EMPLOYEE_FAILED,\n    error: error\n  };\n};\nexport const createEmployee = employeeAccount => {\n  return dispatch => {\n    dispatch(createEmployeeStart());\n    const url = '/employee/user';\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      const error = {\n        data: {\n          detail: \"Not authenticated\"\n        }\n      };\n      dispatch(createEmployeeFailed(error));\n    }\n\n    let headers = {\n      'Authorization': 'Bearer ' + token\n    };\n    axios.post(url, employeeAccount, {\n      headers: headers\n    }).then(response => {\n      let newEmployee = response.data;\n      dispatch(createEmployeeSuccess(newEmployee));\n    }).catch(err => {\n      console.log(err.response);\n      dispatch(createEmployeeFailed(err.response));\n    });\n  };\n}; // clear temp variables\n\nexport const employeeCleanUp = () => {\n  return {\n    type: actionTypes.EMPLOYEE_CLEAN_UP\n  };\n}; //utilities\n\nconst transformEmployeesResponseToList = input => {\n  let employees = [];\n  input.forEach(e => {\n    let employee = {\n      employeeId: e.employee_id,\n      employeeNumber: e.employee_number,\n      firstName: e.first_name,\n      lastName: e.last_name\n    };\n    employees.push(employee);\n  });\n  return employees;\n};\n\nconst transformRolesResponseToList = input => {\n  let roles = [];\n  input.forEach(e => {\n    let role = {\n      roleId: e.role_id,\n      roleCode: e.role_code,\n      roleName: e.role_name\n    };\n    roles.push(role);\n  });\n  return roles;\n};","map":{"version":3,"sources":["C:/Workspace/Restaurant/Customer-App/red-pepper/src/store/actions/employee.js"],"names":["actionTypes","axios","fetchAllEmployeeStart","type","FETCH_ALL_EMPLOYEES_START","fetchAllEmployeeSuccess","employees","FETCH_ALL_EMPLOYEES_SUCCESS","fetchAllEmployeeFailed","error","FETCH_ALL_EMPLOYEES_FAILED","fetchAllEmployees","dispatch","url","token","localStorage","getItem","data","detail","headers","get","then","response","transformEmployeesResponseToList","catch","err","fetchAllRolesStart","FETCH_ALL_ROLES_START","fetchAllRolesSuccess","roles","FETCH_ALL_ROLES_SUCCESS","fetchAllRolesFailed","FETCH_ALL_ROLES_FAILED","fetchAllRoles","transformRolesResponseToList","fetchEmployeeStart","FETCH_EMPLOYEE_START","fetchEmployeeSuccess","employee","FETCH_EMPLOYEE_SUCCESS","fetchEmployeeFailed","FETCH_EMPLOYEE_FAILED","fetchEmployee","employeeId","createEmployeeStart","CREATE_EMPLOYEE_START","createEmployeeSuccess","newEmployee","CREATE_EMPLOYEE_SUCCESS","createEmployeeFailed","CREATE_EMPLOYEE_FAILED","createEmployee","employeeAccount","post","console","log","employeeCleanUp","EMPLOYEE_CLEAN_UP","input","forEach","e","employee_id","employeeNumber","employee_number","firstName","first_name","lastName","last_name","push","role","roleId","role_id","roleCode","role_code","roleName","role_name"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-rp';\r\n\r\n//fetch all\r\nexport const fetchAllEmployeeStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_EMPLOYEES_START\r\n    };\r\n}\r\n\r\nexport const fetchAllEmployeeSuccess = (employees) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_EMPLOYEES_SUCCESS,\r\n        employees: employees\r\n    };\r\n}\r\n\r\nexport const fetchAllEmployeeFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_EMPLOYEES_FAILED,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const fetchAllEmployees = () => {\r\n    return dispatch => {\r\n        dispatch(fetchAllEmployeeStart());\r\n        const url = '/employee';\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            const error = {\r\n                data: {\r\n                    detail: \"Not authenticated\"\r\n                }\r\n            }\r\n            dispatch(fetchAllEmployeeFailed(error))\r\n        }\r\n        let headers = {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n        axios.get(url, {headers: headers})\r\n            .then(response => {\r\n                let employees = []\r\n                employees = transformEmployeesResponseToList(response.data);\r\n                dispatch(fetchAllEmployeeSuccess(employees));\r\n                \r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchAllEmployeeFailed(err.response));\r\n            })\r\n    };\r\n};\r\n\r\n// fetch all roles\r\nexport const fetchAllRolesStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_ROLES_START\r\n    }\r\n}\r\n\r\nexport const fetchAllRolesSuccess = (roles) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_ROLES_SUCCESS,\r\n        roles: roles\r\n    }\r\n}\r\n\r\nexport const fetchAllRolesFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_ROLES_FAILED,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const fetchAllRoles = () => {\r\n    return dispatch => {\r\n        dispatch(fetchAllRolesStart());\r\n        const url = '/role';\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            const error = {\r\n                data: {\r\n                    detail: \"Not authenticated\"\r\n                }\r\n            }\r\n            dispatch(fetchAllEmployeeFailed(error))\r\n        }\r\n        let headers = {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n        axios.get(url, {headers: headers})\r\n            .then(response => {\r\n                let roles = []\r\n                roles = transformRolesResponseToList(response.data);\r\n                \r\n                dispatch(fetchAllRolesSuccess(roles));\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchAllRolesFailed(err.response));\r\n            })\r\n    }\r\n}\r\n\r\n//fetch one\r\nexport const fetchEmployeeStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_EMPLOYEE_START\r\n    };\r\n}\r\n\r\nexport const fetchEmployeeSuccess = (employee) => {\r\n    return {\r\n        type: actionTypes.FETCH_EMPLOYEE_SUCCESS,\r\n        employee: employee\r\n    };\r\n}\r\n\r\nexport const fetchEmployeeFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_EMPLOYEE_FAILED,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const fetchEmployee = (employeeId) => {\r\n    return dispatch => {\r\n        dispatch(fetchEmployeeStart());\r\n        const url = '/employee/' + employeeId;\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            const error = {\r\n                data: {\r\n                    detail: \"Not authenticated\"\r\n                }\r\n            }\r\n            dispatch(fetchEmployeeFailed(error))\r\n        }\r\n        let headers = {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n        axios.get(url, {headers: headers})\r\n            .then(response => {\r\n                let employee = response.data;                \r\n                dispatch(fetchEmployeeSuccess(employee));\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchEmployeeFailed(err.response));\r\n            })\r\n    }\r\n}\r\n\r\n//create\r\nexport const createEmployeeStart = () => {\r\n    return {\r\n        type: actionTypes.CREATE_EMPLOYEE_START\r\n    }\r\n}\r\n\r\nexport const createEmployeeSuccess = (newEmployee) => {\r\n    return {\r\n        type: actionTypes.CREATE_EMPLOYEE_SUCCESS,\r\n        newEmployee: newEmployee\r\n    }\r\n}\r\n\r\nexport const createEmployeeFailed = (error) => {\r\n    return {\r\n        type: actionTypes.CREATE_EMPLOYEE_FAILED,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const createEmployee = (employeeAccount) => {\r\n    return dispatch => {\r\n        dispatch(createEmployeeStart());\r\n        const url = '/employee/user';\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            const error = {\r\n                data: {\r\n                    detail: \"Not authenticated\"\r\n                }\r\n            }\r\n            dispatch(createEmployeeFailed(error))\r\n        }\r\n        let headers = {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n        axios.post(url, employeeAccount, {headers: headers})\r\n            .then(response => {\r\n                let newEmployee = response.data;\r\n                dispatch(createEmployeeSuccess(newEmployee));\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n                dispatch(createEmployeeFailed(err.response));\r\n            })\r\n    }\r\n}\r\n\r\n// clear temp variables\r\nexport const employeeCleanUp = () => {\r\n    return {\r\n        type: actionTypes.EMPLOYEE_CLEAN_UP\r\n    }\r\n}\r\n\r\n//utilities\r\nconst transformEmployeesResponseToList = (input) => {\r\n    let employees = [];\r\n    input.forEach((e) => {\r\n        let employee = {\r\n            employeeId: e.employee_id,\r\n            employeeNumber: e.employee_number,\r\n            firstName: e.first_name,\r\n            lastName: e.last_name\r\n        }\r\n        employees.push(employee);\r\n    })\r\n    return employees;\r\n}\r\n\r\nconst transformRolesResponseToList = (input) => {\r\n    let roles = [];\r\n    input.forEach((e) => {\r\n        let role = {\r\n            roleId: e.role_id,\r\n            roleCode: e.role_code,\r\n            roleName: e.role_name    \r\n        }\r\n        roles.push(role);\r\n    })\r\n    return roles;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}